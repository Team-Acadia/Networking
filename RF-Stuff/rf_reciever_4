import machine
from machine import Pin
import time
import utime

#This code listens for an RF signal from 3 different vibration sensors reporting a fall. At rest, the RF reciever reads noise, random 0s and 1s.
#Therefore, a fall cannot just be signalled by a high pulse from a sensor, so each has an ID it sends in binary
#Also, each vibration sensor's output signal is varried in time so their signals don't collide.

#Constants
POLLING_FREQUENCY = .1 #how often the input is checked
WAIT_AFTER_RCV = 2 #how many seconds to wait and listen for more data after first message

# Set up the input pin for IR sensor
rf = Pin(26, Pin.IN, Pin.PULL_DOWN)

#Vibration sensors IDs marking a fall
key_0 = "100" + "101" + "101" + "001" #sensor num: 0
key_1 = "110" + "010" + "101" + "001" #sensor num: 1
key_2 = "101" + "110" + "011" + "101" #sensor num: 2

#Initailize variables
bitsQueue = [0]*12 #Running Queue of last 12 bits to search for IDs
vibrations_sensed = [0,0,0] #List of which sensors have detected a fall
cycles_to_wait = -1 #How long to wait for other sensors to report a fall

#Keys must be int arrays. Listed as strings above for readability 
keyLength = len(key_0)
key0 = [0]*12
key1 = [0]*12
key2 = [0]*12
for i in range(0,keyLength): 
  key0[i]= int(key_0[i])
  key1[i]= int(key_1[i])
  key2[i]= int(key_2[i])

for i in range(10000000000):
        rf_value = rf.value()
        bitsQueue.append(rf_value)
        bitsQueue.pop(0)
        print(rf_value, bitsQueue)
        #check if current bit string matches a key
        if bitsQueue == key0:
                print("Found key0: ", bitsQueue)
                #allow time for other vibration sensors to also send thier data
                vibrations_sensed[0] = 1
                cycles_to_wait = int(WAIT_AFTER_RCV*2)
                
        if bitsQueue == key1:
                print("Found key1: ", bitsQueue)
                #2nd sensor to send data
                vibrations_sensed[1] = 1
                cycles_to_wait = int(WAIT_AFTER_RCV)
                
        if bitsQueue == key2:
                print("Found key2: ", bitsQueue)
                #Final sensor to send data
                vibrations_sensed[2] = 1
                break
        
        if cycles_to_wait == 1:
                break
        else:
           cycles_to_wait = cycles_to_wait - 1
                
        time.sleep(POLLING_FREQUENCY)
        
print("FOUND KEY ", vibrations_sensed)
        
